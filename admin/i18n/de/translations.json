{
    "Active": "Aktiv",
    "Adapter Instructions": "Adapter-Anleitung",
    "Adapter Instructions:": "Anleitung zu diesem Adapter:",
    "Adapter: Log Parser": "Adapter: Log Parser",
    "Add CSS to JSON Log": "CSS im JSON hinzufügen",
    "Advanced Settings": "Erweiterte Einstellungen",
    "Blacklist": "Blacklist",
    "Blacklist Expressions": "Blacklist-Ausdrücke",
    "Blacklist Instructions": "Blacklist-Anleitung",
    "Clean": "Bereinigen",
    "Column order for JSON table": "Spalten-Reihenfolge für JSON-Tabelle",
    "Columns for JSON table": "Spalten für JSON-Tabelle",
    "Comment": "Kommentar",
    "Date format": "Datumsformat",
    "Detailed filter instructions": "Detaillierte Anleitung zu den Filtern",
    "English": "Englisch",
    "Expert Settings": "Experten-Einstellungen",
    "Filter Rules (Log Parser)": "Filter-Regeln (Log Parser)",
    "Filter/Parser Rules": "Parser-Regeln (Filter)",
    "For each set filter (rule), states are created under 'logparser.[instance].filters'.": "Für jeden gesetzten Filter (Regel) werden jeweils Datenpunkte unterhalb von logparser.[instanz].filters angelegt.",
    "Further Settings": "Weitere Einstellungen",
    "General": "Allgemein",
    "German": "Deutsch",
    "Global Blacklist": "Globale Blacklist",
    "Instance": "Instanz",
    "Instructions": "Anleitungen",
    "Interval for updating states": "Update-Intervall: Datenpunkte aktualisieren",
    "IntroTxt1": "Mit diesem Adapter können die Log-Ausgaben aller Adapter (inkl. der Scripts des JS-Adapters) geparst werden.",
    "IntroTxt2": "Dazu einfach hier in den Einstellungen in der Registerkarte 'Parser-Regeln (Filter)' die entsprechenden Regeln hinterlegen. Bei Installation werden bereits mehrere Regeln als Beispiel gesetzt.",
    "Max": "Max",
    "MaxTxt": "Die maximale Anzahl an Logeinträgen, die in den Datenpunkten behalten werden (ältere werden entfernt). Bitte keine zu hohe Anzahl, je größer, desto mehr Auslastung für den Adapter und damit deinen ioBroker-Server. Eine Zahl von 100 hat sich gut bewährt.",
    "Maximum number of log entries": "Maximale Anzahl Logeinträge",
    "Merge": "Merge",
    "MergeTxt": "Dieser Text wird jeder Logzeile vorangestellt, wenn <i>Merge</i> aktiviert ist. Das <code>#</code>-Zeichen wird dabei dann durch die Anzahl der Logs mit dem gleichen Inhalt ersetzt. Sonderzeichen wie z.B. <code>[](){}</code> sind erlaubt.<br>Beispiele (ohne Anführungszeichen): '<code>[# Einträge]</code>', '<code>(#) </code>', '<code># Einträge: </code>'.",
    "Name": "Name",
    "NumJsonTablesTxt1": "Hiermit können zusätzliche Datenpunkte für die Ausgabe als JSON-Tabelle in VIS erzeugt werden, mit denen es möglich ist, in einer VIS-Tabelle zwischen den einzelnen Filtern umzuschalten (z.B. 'Homematic', 'Warnungen', 'Fehler' usw.), die dann dynamisch jeweils in dieser einen Tabelle ausgegeben werden.",
    "NumJsonTablesTxt2": "Hier die Anzahl der unterschiedlichen JSON-Tabellen angeben, in denen du das brauchst. Diese werden angelegt unter 'visualization.table1', 'visualization.table2', usw. Zum deaktivieren: 0 eintragen (dann werden diese zusätzlichen Datenpunkte nicht erstellt).",
    "NumJsonTablesTxtLabel": "Für wie viele unterschiedliche JSON-Tabellen benötigst du das?",
    "Number": "Anzahl",
    "Number (0 = deactivated)": "Anzahl (0 = deaktiviert)",
    "Number of JSON tables used in VIS": "Anzahl verwendeter JSON-Tabellen in VIS",
    "OrderTxt": "Hier kann die Reihenfolge der einzelnen Spalten verändert werden. Als zusätzliche Spalte wird immer ts (timestamp) hinzugefügt. In VIS usw. bei Bedarf einfach ausblenden.<br>Falls du weniger als 4 Spalten brauchst: Wähle einfach einen Eintrag der ersten Spalten aus, die du brauchst, und blende den Rest dann mit dem VIS JSON-Table-Widget (o.ä.) aus.",
    "Output for 'Today'": "Ausgabe für 'Heute'",
    "Output for 'Yesterday'": "Ausgabe für 'Gestern'",
    "Parser Rules (Filter)": "Parser-Regeln (Filter)",
    "ParserRules.Welcome": "Willkommen beim Log-Parser-Adapter. Aktueller ioBroker-Forum-Artikel",
    "Prepended text (# is replaced by number)": "Vorangestellter Text (# wird durch Anzahl ersetzt)",
    "Remove 'script.js.Script_Name'": "Entferne 'script.js.Script_Name'",
    "Remove PID": "PID entfernen",
    "Remove script.js.Script_Name:": "",
    "RemovePidTxt": "Der js-Controller Version 2.0 oder größer fügt Logs teils vorne die PID in Klammern hinzu, also z.B. '(12345) Terminated: Without reason'. Durch Aktivierung dieser Option werden die PIDs inkl. Klammern, wie z.B. `(12345)`, aus den Logzeilen entfernt.",
    "RemoveScriptJsTxt": "Vom JavaScript-Adapter generierte Logs beginnen mit 'script.js.Script_Name:'. Wenn diese Option aktiviert ist, werden diese automatisch entfernt.",
    "Replace date with 'Today' / 'Yesterday'": "Datum durch 'Heute' / 'Gestern' ersetzen",
    "ReplaceDateTxt": "In den Filtern kann beim Datumsformat für mittels Hash-Zeichen (#) das heutige bzw. gestrige Datum durch 'Heute' bzw. 'Gestern' ersetzt werden. Hier können andere Begriffe statt 'Heute'/'Gestern' definiert werden.",
    "Seconds": "Sekunden",
    "Select accordingly": "Entsprechend auswählen",
    "Sort descending (newest on top)": "Absteigend sortieren (neuester oben)",
    "SortTxt": "Wenn aktiviert: sortiert die Logeinträge absteigend, also neuester oben. Wenn deaktiviert: Sortiert die Logeinträge aufsteigend, also ältester oben.",
    "Sorting": "Sortierung",
    "Start": "Start",
    "Text": "Text",
    "Text for 'Merge' Logs": "Text für 'Merge' (Logs zusammenfassen)",
    "Text for Today": "Text für Heute",
    "Text for Yesterday": "Text für Gestern",
    "Update Interval": "Aktualisierungs-Intervall",
    "Version": "Version",
    "Visualization": "Visualisierung",
    "Whitelist AND": "Whitelist UND",
    "Whitelist OR": "Whitelist ODER",
    "cssJSON_1": "Hiermit kannst du im JSON zusätzlich CSS hinzufügen. Hier ein Beispiel:",
    "cssJSON_2": "Im folgenden Beispiel war alles deaktiviert:",
    "cssJSON_3": "Hier waren alle Optionen aktiviert:",
    "cssJSON_4": "Beachte hierbei die CSS-Klassen wie <code>logDate</code>, <code>logSeverity</code>, etc., mit denen du diese Werte jeweils separat in CSS formatieren kannst.",
    "cssJSON_5": "Zusätzlich gibt es je nach Log-Stufe (warn, error, usw.) noch jeweils <code>logWarn</code>, <code>logError</code>, etc. als CSS-Klassen.<br>Im obigen Beispiel wurde ein Log mit Stufe 'warn' gefiltert, also wurde jeweils noch die CSS-Klasse <code>logWarn</code> hinzugefügt.",
    "expandHelpTxt": "Hier klicken, um die Hilfe aufzuklappen",
    "updateIntTxt": "Neu reinkommende Logeinträge werden gesammelt und regelmäßig in die Datenpunkte geschrieben. Hiermit kann das Intervall definiert werden. Hinweis: Die Datenpunkte werden nur geschrieben, falls es eine Änderung gab. Dennoch ist es aus Performance-Sicht nicht sinnvoll, hier ein zu kurzes Intervall einzustellen. Kleiner als 2 Sekunden ist nicht erlaubt."
}